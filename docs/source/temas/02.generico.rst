..
  Copyright (c) 2025 Allan Avendaño Sudario
  Licensed under Creative Commons Attribution-ShareAlike 4.0 International License
  SPDX-License-Identifier: CC-BY-SA-4.0

===================
02. Tipos Genéricos
===================

.. topic:: Objetivo específico
    :class: objetivo

    Comprender los tipos de datos genéricos mediante la definición implementación y uso de estructuras parametrizadas que permitan reutilizar código con distintos tipos de datos para fomentar la flexibilidad la escalabilidad y la eficiencia en el desarrollo de soluciones computacionales..

Teoría
======

.. rst-class:: centered

    Diseña el TDA **Caja fuerte** permita guardar un articulo.

A continuación, se muestra un ejemplo de cómo se podría implementar el TDA Caja fuerte en Java:

.. code-block:: java

    public class CajaFuerte {
        private String articulo;

        public CajaFuerte(String articulo) {
            this.articulo = articulo;
        }

        public void setArticulo(String articulo) {
            this.articulo = articulo;
        }

        public String getArticulo() {
            return this.articulo;
        }
    }

    public class Main {
        public static void main(String[] args) {

            CajaFuerte cajaFuerte = new CajaFuerte("Artículo valioso");
            System.out.println("Artículo guardado: " + cajaFuerte.getArticulo());

        }
    }

Esta implementación es específica para un tipo de dato (en este caso, `String`). 


.. rst-class:: centered 
  
    ¿Qué pasaría si quisiéramos almacenar un objeto de otro tipo (dinero, joyas o documentos importantes)? 

.. image:: ../archivos/sr-stark-ahora-que-hago.webp
    :width: 20px
    :align: center
    

**Solución:** Los tipos genéricos permiten definir clases, interfaces y métodos que pueden trabajar con diferentes tipos de datos sin necesidad de duplicar el código.

Tipos Genéricos
---------------

.. sidebar:: 

    Nombres de **tipos de parámetros** más comúnmente usados
    
    1.  E - Element (usado ampliamente por el Framework de Collecciones Java)
    2.  K - Key
    3.  N - Number
    4.  T - Type
    5.  V - Value
    6.  S,U,V etc. - 2nd, 3rd, 4th types

    Según la convención, los parámetros deben ser letras mayúsculas y simples.

A continuación, en la :ref:`CajaFuerte.java <solucion_caja_fuerte>` se muestra cómo se podría implementar el TDA Caja fuerte utilizando tipos genéricos en Java, mediante el uso de parámetros de tipo:

.. _solucion_caja_fuerte:

.. code-block:: java

    public class CajaFuerte<T> {
        private T articulo;

        public CajaFuerte(T articulo) {
            this.articulo = articulo;
        }

        public void setArticulo(T articulo) {
            this.articulo = articulo;
        }

        public T getArticulo() {
            return this.articulo;
        }
    }

    public class Main {
        public static void main(String[] args) {

            CajaFuerte<String> cajaFuerte = new CajaFuerte<String>("Documentos importantes");
            System.out.println("Documento guardado: " + cajaFuerte.getArticulo());

            CajaFuerte<Double> cajaFuerte2 = new CajaFuerte<Double>(2500.75);
            System.out.println("Dinero guardado: " + cajaFuerte2.getArticulo());

            // Asumiendo que Joya es una clase definida previamente
            Joya joya = new Joya("Anillo de diamantes", 5000.00);

            CajaFuerte<Joya> cajaFuerte3 = new CajaFuerte<Joya>(joya);
            System.out.println("Joya guardada: " + cajaFuerte3.getArticulo().getNombre());

        }
    }

Práctica
========

Ejercicios
==========

Actividades Virtual Sincrónicas
-------------------------------

Actividades Autónomas
---------------------

Conclusiones
============

.. topic:: Preguntas de cierre

    * ¿Por qué se considera que los Tipos Genéricos aumentan la reutilización de código y cómo se relaciona este concepto con el principio de abstracción en las estructuras de datos?
    * ¿Qué pruebas diseñarías para asegurarte de que una estructura de datos genérica funciona correctamente con distintos tipos de datos, como enteros, cadenas o objetos personalizados?
    * ¿Cómo influye tu actitud hacia el aprendizaje autónomo y el trabajo riguroso en tu capacidad para implementar y documentar correctamente estructuras genéricas en proyectos reales?