..
  Copyright (c) 2025 Allan Avendaño Sudario
  Licensed under Creative Commons Attribution-ShareAlike 4.0 International License
  SPDX-License-Identifier: CC-BY-SA-4.0

===================
02. Tipos Genéricos
===================

.. topic:: Objetivo específico
    :class: objetivo

    Comprender los tipos de datos genéricos mediante la definición implementación y uso de estructuras parametrizadas que permitan reutilizar código con distintos tipos de datos para fomentar la flexibilidad la escalabilidad y la eficiencia en el desarrollo de soluciones computacionales..

Teoría
======

.. rst-class:: think

    Diseña el TDA **Caja fuerte** permita guardar un articulo. ¿Qué atributos y métodos consideras necesarios para este TDA? 

.. sidebar:: Caja fuerte
    .. image:: ../archivos/caja_fuerte.jpeg
        :width: 150px

Una **Caja fuerte** es un objeto que permite almacenar un artículo de valor, como dinero, joyas o documentos importantes.

.. rst-class:: do

    Implemente el TDA Caja fuerte en Java, con la clase `CajaFuerte.java`.

A continuación, la versión inicial de la clase :ref:`CajaFuerte.java <clase_caja_fuerte>` en Java, de acuerdo con las características del :doc:`POO <../transversales/01.POO>`. Además, instancie de un objeto de la clase Caja fuerte y compruebe sus métodos en el método `main`.

.. _clase_caja_fuerte:

.. dropdown:: Haga clic para ver la solución
    :animate: fade-in-slide-down
    
    .. code-block:: java

        public class CajaFuerte {
            private String articulo;

            public CajaFuerte(String articulo) {
                this.articulo = articulo;
            }

            public void setArticulo(String articulo) {
                this.articulo = articulo;
            }

            public String getArticulo() {
                return this.articulo;
            }
        }

        public class Main {
            public static void main(String[] args) {

                CajaFuerte cajaFuerte = new CajaFuerte("Artículo valioso");
                System.out.println("Artículo guardado: " + cajaFuerte.getArticulo());

            }
        }

.. attention::

    Esta implementación es específica para un tipo de dato (en este caso, `String`). 

.. rst-class:: think 
  
    ¿Qué pasaría si quisiéramos almacenar un objeto de otro tipo (dinero, joyas o documentos importantes)? 

    .. image:: ../archivos/sr-stark-ahora-que-hago.webp
        :width: 250px
        :align: center


Tipos de Datos Genéricos
------------------------

Los tipos de datos genéricos permiten definir clases, interfaces y métodos para que pueden trabajar con diferentes tipos de datos sin necesidad de duplicar el código. En Java, los :ref:`tipos de parámetros <tipos_parametros>` se utilizan para crear estructuras de datos flexibles y reutilizables. Según la convención, los parámetros deben ser letras mayúsculas y simples.

.. _tipos_parametros:

.. list-table:: Tipos de Parámetros Genéricos en Java
   :widths: 10 30 35 45
   :header-rows: 1

   * - Parámetro
     - Significado
     - Uso común
     - Ejemplo de código
   * - E
     - Element
     - Se usa en estructuras de datos que almacenan elementos, como en `List<E>`, `Set<E>`, etc.
     - ``public class Caja<E> { E elemento; }``
   * - K
     - Key
     - Representa la clave en estructuras tipo mapa, como en `Map<K, V>`.
     - ``Map<K, V> mapa = new HashMap<>();``
   * - N
     - Number
     - Indica que el parámetro es un tipo numérico, útil para cálculos genéricos.
     - ``public class Calculadora<N extends Number> {}``
   * - T
     - Type
     - Tipo genérico más común, usado en clases y métodos sin contexto específico.
     - ``public class Generico<T> { T dato; }``
   * - V
     - Value
     - Se usa junto con `K` en estructuras clave–valor, como en `Map<K, V>`.
     - ``Map<K, V> diccionario = new HashMap<>();``
   * - S, U, V, etc.
     - Second, Third, Fourth types
     - Se utilizan cuando hay múltiples tipos genéricos en métodos o clases complejas, por ejemplo `Pair<T, U>`, `Triple<T, U, V>`.
     - ``public class Par<S, T> { S primero; T segundo; }``


A continuación, en la :ref:`CajaFuerte.java <solucion_caja_fuerte>` mediante el uso de parámetros de tipo:

.. _solucion_caja_fuerte:

.. code-block:: java

    public class CajaFuerte<T> {
        private T articulo;

        public CajaFuerte(T articulo) {
            this.articulo = articulo;
        }

        public void setArticulo(T articulo) {
            this.articulo = articulo;
        }

        public T getArticulo() {
            return this.articulo;
        }
    }

    public class Main {
        public static void main(String[] args) {

            CajaFuerte<String> cajaFuerte = new CajaFuerte<String>("Aquí comienza el texto de un documento importante ...");
            System.out.println("Documento guardado: " + cajaFuerte.getArticulo());

            CajaFuerte<Double> cajaFuerte2 = new CajaFuerte<Double>(2500.75);
            System.out.println("Dinero guardado: " + cajaFuerte2.getArticulo());

            // Asumiendo que Joya es una clase definida previamente
            Joya joya = new Joya("Anillo de diamantes", 5000.00);

            CajaFuerte<Joya> cajaFuerte3 = new CajaFuerte<Joya>(joya);
            System.out.println("Joya guardada: " + cajaFuerte3.getArticulo().getNombre());

        }
    }

Práctica
========

.. rst-class:: do 

    Diseñe el TDA `Nodo` que permita almacenar un contenido de cualquier tipo. Implemente el TDA `Nodo` con la clase `Nodo.java`.


Ejercicios
==========

Actividades Virtual Sincrónicas
-------------------------------

Actividades Autónomas
---------------------

Conclusiones
============

.. topic:: Preguntas de cierre

    * ¿Por qué se considera que los Tipos Genéricos aumentan la reutilización de código y cómo se relaciona este concepto con el principio de abstracción en las estructuras de datos?
    * ¿Qué pruebas diseñarías para asegurarte de que una estructura de datos genérica funciona correctamente con distintos tipos de datos, como enteros, cadenas o objetos personalizados?
    * ¿Cómo influye tu actitud hacia el aprendizaje autónomo y el trabajo riguroso en tu capacidad para implementar y documentar correctamente estructuras genéricas en proyectos reales?