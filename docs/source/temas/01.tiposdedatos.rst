..
  Copyright (c) 2025 Allan Avendaño Sudario
  Licensed under Creative Commons Attribution-ShareAlike 4.0 International License
  SPDX-License-Identifier: CC-BY-SA-4.0

=================
01. Tipos de Datos
=================

.. topic:: Objetivo general
    :class: objetivo

    Comprender los tipos de datos mediante el análisis de sus atributos y comportamientos así como la aplicación de tipos de datos genéricos para desarrollar soluciones computacionales que promuevan el pensamiento algorítmico y la reutilización del código.

Contenidos
==========

Tipos de Datos
--------------

Los datos se clasifican en diferentes tipos según sus características y la forma en que se utilizan en la programación. En este contexto, los tipos de datos se dividen en **Primitivos** y  **Compuestos**. 

Datos primitivos
^^^^^^^^^^^^^^^^

Los tipos de datos primitivos son los bloques básicos de construcción en la programación. Representan valores simples y no se pueden descomponer en partes más pequeñas. Ver la :ref:`tabla_tipos_datos_primitivos_java` para más detalles.

.. _tabla_tipos_datos_primitivos_java:

.. list-table:: Tabla con los tipos de datos primitivos
   :widths: 15 30 30 25
   :header-rows: 1

   * - Tipo de dato
     - Conjunto de valores
     - Ejemplos
     - Operaciones
   * - Enteros
     - Números sin parte decimal  
       (e.g., -2, -1, 0, 1, 2, ...)
     - 
       .. code-block:: java
          
          int edad = 20;
          int saldo = -150;

     - Suma (+), Resta (-),  
       Multiplicación (*),  
       División (/), Módulo (%)
   * - Reales
     - Números con parte decimal  
       (e.g., -3.14, 0.0, 2.718)
     -
       .. code-block:: java

          double pi = 3.1416;
          float temp = -2.5f;

     - Suma (+), Resta (-),  
       Multiplicación (*),  
       División (/)
   * - Lógicos
     - Verdadero o falso  
       (`true`, `false`)
     -

       .. code-block:: java

          boolean activo = true;
          boolean esMayor = false;

     - AND (&&), OR (||),
       NOT (!)
   * - Caracteres
     - Cualquier carácter Unicode  
       (e.g., 'a', 'Z', '9', '#')
     -

       .. code-block:: java

          char inicial = 'A';
          char numero = '5';

     - Comparación (<, >, ==),  
       Concatenación con strings,  
       Conversión a entero (cast)

Datos compuestos
^^^^^^^^^^^^^^^^

Los tipos de datos compuestos son estructuras más complejas que se construyen a partir de tipos primitivos. Permiten almacenar múltiples valores y definir comportamientos asociados. Ver la :ref:`tabla_tipos_datos_compuestos_java` para más detalles.

.. _tabla_tipos_datos_compuestos_java:

.. list-table:: Tabla con los tipos de datos compuestos en Java
   :widths: 15 30 30 25
   :header-rows: 1

   * - Tipo de dato
     - Conjunto de valores
     - Ejemplos
     - Operaciones
   * - Arreglos
     - Secuencia de elementos del mismo tipo  
       con longitud fija
     - 
        .. code-block:: java
  
            int[] edades = {18, 22, 25};
            String[] dias = new String[7];

     - Acceso por índice (`arr[i]`),  
       modificación de valores,  
       iteración (`for`),  
       longitud (`arr.length`)
   * - Clases
     - Conjunto de atributos y métodos  
       definidos por el programador  
       (instancias de objetos)
     - 
       .. code-block:: java

          class Persona {
              String nombre;
              int edad;
          }
          Persona p = new Persona();

     - Acceso a atributos (`p.nombre`),  
       invocación de métodos (`p.saludar()`),  
       creación de instancias (`new`),  
       herencia y composición
   * - Colecciones
     - Estructuras dinámicas  
       que agrupan elementos (listas,  
       conjuntos, mapas)
     - 
       .. code-block:: java

          List<String> nombres = new ArrayList<>();
          Set<Integer> numeros = new HashSet<>();

     - Inserción (`add()`),  
       eliminación (`remove()`),  
       búsqueda (`contains()`),  
       iteración (`for-each`)

Tipos de Datos Abstractos (TDA)
-------------------------------

Abstracción
^^^^^^^^^^^

.. sidebar:: Abstracción
  
    Lo más importante el **¿Qué hace?** en lugar de **¿Cómo lo hace?**.

La abstracción es un principio fundamental en la programación que permite simplificar la complejidad al ocultar los detalles de implementación y enfocarse en las características esenciales de un objeto o sistema. 





TDA List
--------

ArrayList vs LinkedList
^^^^^^^^^^^^^^^^^^^^^^^

Conclusiones
============

.. topic:: Preguntas de cierre

    * Saber
    * Hacer
    * Ser
