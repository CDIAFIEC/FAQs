







Abstracción
^^^^^^^^^^^

La abstracción es un principio fundamental en la programación para simplificar la complejidad de un objeto o sistema. **Menos** detalles de implementación y **más** características esenciales.

.. rst-class:: think

    Piensa en un carro, ¿Qué es un carro? ¿Qué tiene un carro? ¿Qué hace un carro?

.. grid:: 1 1 2 2
    :gutter: 2

    .. grid-item:: 

        .. dropdown:: Esto es un carro

            .. image:: ../archivos/carro02.jpg
                :width: 300px
                :align: center

    .. grid-item::

        .. dropdown:: Esto también es un carro
            
            .. image:: ../archivos/carro01.jpg
                :width: 300px
                :align: center   

Composición de un TDA
^^^^^^^^^^^^^^^^^^^^^

Un Tipo de Dato Abstracto (TDA) es una estructura que define un conjunto de valores y las operaciones que se pueden realizar sobre esos valores, sin especificar cómo se implementan internamente. Un TDA se compone de dos elementos esenciales, como se muestra en el :ref:`gráfico con la composición de un TDA <composicion_tda>`:

1. **Comportamiento u operaciones**: Define las acciones que se pueden realizar con el TDA, como insertar, eliminar, buscar, etc.
2. **Propiedades o atributos**: Describe el estado interno del TDA, es decir, cómo se almacenan los datos y cómo se gestionan las operaciones.

.. _composicion_tda:

.. graphviz::
    :caption: Composición de un TDA
    :alt: Gráfico con la composición de un TDA
    :align: center

    digraph {
        node [shape=box];
        
        TDA [label="Tipo de Dato Abstracto (TDA)"];
        operaciones [label="Comportamiento u operaciones \nLos TDAs existen para proveer operaciones" tooltip="Los TDAs existen para proveer operaciones" ];
        representacion [label="Propiedades o Atributos \nSe refiere al funcionamiento interno del TDA" tooltip="Se refiere al funcionamiento interno del TDA"];

        TDA -> representacion;
        TDA -> operaciones;
    }


2


TDA: Carro
----------

.. rst-class:: think
  
    Diseña un **Carro**, piensa en sus propiedades o atributos y en sus comportamientos u operaciones. 

A continuación, una posible composición del :ref:`TDA Carro <tda_carro>`, que incluye sus propiedades y comportamientos.

.. _tda_carro:

.. grid:: 1 1 2 2
    :gutter: 2

    .. grid-item:: 

        .. dropdown:: Propiedades o atributos

            1. **Velocidad**: La velocidad actual del carro.
            2. **Color**: El color del carro.
            3. **Modelo**: El modelo del carro.
            4. **Direccion**: La dirección en la que está girando el carro.
            5. **Combustible**: La cantidad de combustible disponible en el carro.
            6. **Estado**: El estado del carro (encendido, apagado, en movimiento, detenido).
            

    .. grid-item::

        .. dropdown:: Comportamiento u operaciones

            1. **Acelerar**: Incrementa la velocidad del carro.
            2. **Frenar**: Reduce la velocidad del carro.
            3. **Girar**: Gira el carro a la izquierda o a la derecha.
            4. **Encender**: Enciende el carro.
            5. **Apagar**: Apaga el carro.
            6. **Reabastecer combustible**: Aumenta la cantidad de combustible disponible.
            7. **Detener**: Detiene el carro.
            

Implementación: Carro.java
---------------------------

.. rst-class:: do 

    Implemente el TDA Carro con la clase `Carro.java`, de acuerdo con las características del :doc:`Paradigma de Programación Orientada a Objetos <../transversales/01.POO>`. Además, la instación de un objeto de la clase Carro y la prueba de sus métodos en el método `main`.

A continuación, la versión inicial de la clase :ref:`Carro.java <clase_carro>` en Java.

.. _clase_carro:

.. dropdown:: Haga clic para ver la solución
    :animate: fade-in-slide-down
    
    .. code-block:: java
        :caption: Carro.java

        /**
        * Clase que representa un Carro.
        * Define las propiedades y comportamientos del TDA Carro.
        */
        public class Carro {

            // Propiedades o atributos
            private int velocidad;

            // Constructor
            public Carro() {
                this.velocidad = 0; // Inicializa la velocidad a 0
            }

            // Métodos para acceder a las propiedades
            public int getVelocidad() {
                return velocidad;
            }
            
            // Métodos para modificar las propiedades
            public void setVelocidad(int velocidad) {
                this.velocidad = velocidad;
            }
            
            // Métodos para las operaciones del TDA

            public void acelerar() {
                velocidad += 10; // Incrementa la velocidad en 10 unidades
            }
            public void frenar() {
                velocidad -= 10; // Reduce la velocidad en 10 unidades
            }
            
        }

        public class Main {

            public static void main(String[] args) {

                // Crear una instancia del TDA Carro
                Carro miCarro = new Carro();
                
                // Usar los métodos del TDA Carro
                miCarro.acelerar();
                System.out.println("Velocidad actual: " + miCarro.getVelocidad() + " km/h");
                
                miCarro.frenar();
                System.out.println("Velocidad después de frenar: " + miCarro.getVelocidad() + " km/h");
            }

        }

3 


Actividades Virtual Sincrónicas
-------------------------------

Carro.java
^^^^^^^^^^

Modifique la implementación de la clase :ref:`Carro.java <clase_carro>` para incluir los siguientes comportamientos y propiedades:

1. Implemente un método `encender` en la clase Carro que cambie el estado del carro a encendido.
2. Agregue un método `apagar` que cambie el estado del carro a apagado.
3. Implemente un método `detener` en la clase Carro que detenga el carro estableciendo la velocidad a 0.
4. Agregue un método `reabastecerCombustible` que permita aumentar la cantidad de combustible disponible en el carro.
5. Modifique el método `frenar` para que no permita que la velocidad sea negativa.

Fracción
^^^^^^^^

1. Diseñe el TDA `Fracción` con las propiedades y los comportamientos necesarios. Asegúrese de que la implementación respete los principios del TDA, es decir, que separe las operaciones del estado interno de la fracción

2. Implemente el TDA `Fracción` en la clase `Fracción.java` en Java, de acuerdo con las características del Paradigma de Programación Orientada a Objetos:

   a) Defina los atributos; además, los métodos para acceder y modificar los atributos del TDA. Considere la encapsulación.
   b) Implemente un constructor para inicializar las propiedades del TDA.
   c) Implemente un método para mostrar la información de la fracción.
   d) Implemente los métodos para realizar las operaciones del TDA.
   e) Implemente un método `main` para crear una instancia de la clase y probar sus métodos.

Actividades Autónomas
---------------------

1. Diseñe los siguientes Tipos de Datos Abstractos (TDA) considerando sus propiedades y comportamientos: `Rectángulo`, `Libro`, `Estudiante` y `Curso`.
2. Implemente los TDAs con clases en Java, de acuerdo con las características del Paradigma de Programación Orientada a Objetos. 

