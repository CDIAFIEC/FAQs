..
  Copyright (c) 2025 Allan Avendaño Sudario
  Licensed under Creative Commons Attribution-ShareAlike 4.0 International License
  SPDX-License-Identifier: CC-BY-SA-4.0

==========================================
02. Programación Orientada a Objetos (POO)
==========================================

.. topic:: Objetivo general
    :class: objetivo

    Recordar los conceptos fundamentales de la Programación Orientada a Objetos (POO), incluyendo clases, objetos, herencia, polimorfismo y encapsulamiento, para aplicar estos principios en el desarrollo de software modular y reutilizable.

Atributos y Métodos
===================

Los atributos son las características o propiedades de un objeto, mientras que los métodos son las acciones o comportamientos que el objeto puede realizar. En la POO, los atributos y métodos se definen dentro de una clase, que actúa como un plano para crear objetos.

En la clase :ref:`Perro.java <clase_perro>`, los atributos podrían incluir `nombre`, `edad` y `raza`, mientras que los métodos podrían incluir `ladrar()`, `correr()` y `sentarse()`.

.. _clase_perro:

.. code-block:: java
    :caption: Perro.java

    public class Perro {
        private String nombre;
        private int edad;
        private String raza;

        public Perro(String nombre, int edad, String raza) {
            this.nombre = nombre;
            this.edad = edad;
            this.raza = raza;
        }

        public void ladrar() {
            System.out.println(nombre + " está ladrando.");
        }

        public void correr() {
            System.out.println(nombre + " está corriendo.");
        }

        public void sentarse() {
            System.out.println(nombre + " se ha sentado.");
        }
    }

Constructor de la clase
=======================

El constructor de una clase es un método especial que se llama cuando se crea un objeto de esa clase. Su propósito es inicializar los atributos del objeto. 

La clase `Perro.java` puede tener varios :ref:`constructores <constructores_perro>`, como `Perro(String nombre, int edad, String raza)`, que inicializa los atributos `nombre`, `edad` y `raza` del objeto `Perro`. Esto se conoce como  **sobrecarga de constructores**.

.. _constructores_perro:

.. code-block:: java

    public class Perro {

        ...

        public Perro(String nombre, int edad, String raza) {
            this.nombre = nombre;
            this.edad = edad;
            this.raza = raza;
        }

        public Perro(String nombre) {
            this.nombre = nombre;
            this.edad = 0; // Valor por defecto
            this.raza = "Desconocida"; // Valor por defecto
        }

        public Perro() {
            this.nombre = "Sin nombre"; // Valor por defecto
            this.edad = 0; // Valor por defecto
            this.raza = "Desconocida"; // Valor por defecto
        }

        // Otros atributos y métodos...

    }

Encapsulación
=============

La encapsulación es un principio de la POO que consiste en ocultar los detalles internos de una clase y exponer solo lo necesario a través de métodos públicos. Esto se logra utilizando modificadores de acceso como `private`, `public` y `protected`.

En :ref:`encapsulacion`, los atributos de una clase se declaran como `private`, lo que significa que no pueden ser accedidos directamente desde fuera de la clase. En su lugar, se utilizan métodos públicos para acceder y modificar estos atributos, lo que permite controlar cómo se interactúa con ellos y proteger la integridad del objeto.

.. _encapsulacion:

.. code-block:: java
    :caption: Encapsulación en Perro.java

    public class Perro {
        private String nombre;
        private int edad;
        private String raza;

        // Constructor y otros métodos...
    }


Métodos de acceso y modificación 
================================

En :ref:`metodos_acceso_modificacion`, se muestran los métodos de acceso (getters) y modificación (setters) de `nombre`, que son fundamentales para la encapsulación. Estos métodos permiten interactuar con los atributos privados de una clase sin exponerlos directamente.

.. _metodos_acceso_modificacion:

.. code-block:: java
    :caption: Métodos de acceso y modificación en Perro.java
    
    public class Perro {

        private String nombre;
        ...
        
        public String getNombre() {
            return nombre;
        }

        public void setNombre(String nombre) {
            this.nombre = nombre;
        }

        // Otros atributos y métodos...
    }
